generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  firstname   String        @db.VarChar
  lastname    String        @db.VarChar
  birthdate   DateTime      @db.Date
  phone       String        @unique @db.VarChar
  email       String        @unique @db.VarChar
  password    String        @db.VarChar
  UserCompany UserCompany[]
}

model Company {
  id            Int             @id @default(autoincrement())
  sampleName    String          @db.VarChar
  registerName  String          @unique @db.VarChar
  cnpj          String          @unique @db.VarChar
  ie            String?         @db.VarChar
  phone         String?         @db.VarChar
  email         String?         @db.VarChar
  address       String?         @db.VarChar
  city          String?         @db.VarChar
  state         String?         @db.VarChar
  billsToPay    BillsToPay[]
  CompanyEntity CompanyEntity[]
  UserCompany   UserCompany[]
}

model Entity {
  id             Int              @id @default(autoincrement())
  type           String           @db.VarChar
  registerName   String           @unique @db.VarChar
  sampleName     String           @db.VarChar
  cpfCnpj        String           @unique @db.VarChar
  ie             String?          @db.VarChar
  phone          String?          @db.VarChar
  email          String?          @db.VarChar
  address        String?          @db.VarChar
  city           String?          @db.VarChar
  state          String?          @db.VarChar
  cep            String?          @db.VarChar
  number         Int?             
  complement     String?          @db.VarChar
  neighborhood   String?          @db.VarChar
  observation    String?          @db.VarChar
  CompanyEntity  CompanyEntity[]
  EntityClient   EntityClient[]
  EntitySupplier EntitySupplier[]
}

model CompanyEntity {
  idCompany Int
  idEntity  Int
  Company   Company @relation(fields: [idCompany], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Entity    Entity  @relation(fields: [idEntity], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idCompany, idEntity])
}

model EntityClient {
  id       Int     @id @default(autoincrement())
  idEntity Int?
  Entity   Entity? @relation(fields: [idEntity], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model EntitySupplier {
  id       Int     @id @default(autoincrement())
  idEntity Int?
  Entity   Entity? @relation(fields: [idEntity], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserCompany {
  idUser         Int
  idCompany      Int
  permission     Int
  defaultCompany Boolean
  Company        Company @relation(fields: [idCompany], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User           User    @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idUser, idCompany])
}

model BillsToPay {
  id          Int      @id @default(autoincrement())
  description String?
  dueDate     DateTime
  value       Float
  status      Int
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   Int
}